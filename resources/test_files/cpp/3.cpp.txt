#include <iostream>

struct Cls {
    
    Cls(char c, double d, int i){
        this->c = c;
        this->d = d;
        this->i = i;
    }

    private:
        char c;
        double d;
        int i;
};

struct Cls_friend {
    char c;
    double d;
    int i;
};
 
    char &get_c(Cls &cls) {
        Cls_friend * clsFriend = reinterpret_cast<Cls_friend*>(&cls);
        return clsFriend->c;
    }

    // Эта функция должна предоставить доступ к полю d объекта cls.
    // Обратите внимание, что возвращается ссылка на double, т. е.
    // доступ предоставляется на чтение и запись.
    double &get_d(Cls &cls) {
        Cls_friend * clsFriend = reinterpret_cast<Cls_friend*>(&cls);
        return clsFriend->d;
    }

    // Эта функция должна предоставить доступ к полю i объекта cls.
    // Обратите внимание, что возвращается ссылка на int, т. е.
    // доступ предоставляется на чтение и запись.
    int &get_i(Cls &cls) {
        Cls_friend * clsFriend = reinterpret_cast<Cls_friend*>(&cls);
        return clsFriend->i;
    }


int main(){
    Cls cls('a', 1.0, 2);
    char & a = get_c(cls);
    a = 'b';
    std::cout << get_c(cls);
    return 1;
}