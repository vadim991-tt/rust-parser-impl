package io.smartforce.plugin.bitbucket.navigation.dto;


import io.smartforce.plugin.bitbucket.navigation.dto.common_format.dependency.MethodDescription;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class InvocationStructure {
    private List<RepositoryImportDeclaration> repositoryImportDeclarations;
    private List<MethodDescription> methodDescriptions;
    private List<String> typeCodes;

    public List<RepositoryImportDeclaration> getRepositoryImportDeclarations() {
        return repositoryImportDeclarations;
    }

    public List<MethodDescription> getMethodDescriptions() {
        return methodDescriptions;
    }

    public List<String> getTypeCodes(){
        return typeCodes;
    }

    public InvocationStructure(List<RepositoryImportDeclaration> repositoryImportDeclarations, List<MethodDescription> methodDescriptions, List<String> typeCodes) {
        this.repositoryImportDeclarations = repositoryImportDeclarations;
        this.methodDescriptions = methodDescriptions;
        this.typeCodes = typeCodes;
    }

    /* Java Native constructor  */
    public InvocationStructure(RepositoryImportDeclaration[] repositoryImportDeclarations, MethodDescription[] methodDescriptions, String[] typeCodes) {
        this.repositoryImportDeclarations = Arrays.asList(repositoryImportDeclarations);
        this.methodDescriptions = Arrays.asList(methodDescriptions);
        this.typeCodes = Arrays.asList(typeCodes);
    }

    public static  <T extends Enum<T>> List<String> getTypeCodesFromEnum(Class<T> enumType) {
        return Arrays.stream(enumType.getEnumConstants()).map(Enum::name).collect(Collectors.toList());
    }
}
