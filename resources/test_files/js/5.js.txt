const person = {
    name: 'Vadim',
    age: 21,
    isSoftwareEngineer: true,
    'conplex key': 'complex value',
    ['key_' + (1+3)]: 'Computed Key',
    greet(){
        console.log('greet from person')
    },
    info(){
        console.info('Информация про человека по имени: ' + this.name)
    }
}

// console.log(person.name);
// console.log(person['age']);
// console.log(person["conplex key"]);
// console.log(person['conplex key']);

console.log(person.greet());
console.log(person.info());

// let name = person.name;
// let age = person.age;
// let isSoftwareEngineer = person.isSoftwareEngineer;

// Деструктуризация
const {name, age, isSoftwareEngineer} = person; // появятся 3 новые переменные со значениями из объекта
delete person["key_4"]; // deleting field


// Итерация по полям
for(let key in person){
    // Только свои поля
    if(person.hasOwnProperty(key)){
        console.log('key: ' + key + ' field: ' + person[key]);
    }
}

const keys = Object.keys(person); // keys array
keys.forEach((key) => {
    console.log('key: ' + key + ' field: ' + person[key]);
})



// У каждой функции есть контекст
const logger = {
    keys(){
        console.log('Object Keys: ', Object.keys(this))
    },

    keysAndValues(){
        Object.keys(this).forEach(key => {
            console.log(`"${key}" : ${this[key]}`);
        });
    },

    keysAndValuesError(){ // Т.к. у каждой функции есть свой контекст то после вызова function(key) у нее будет свой this
        Object.keys(this).forEach(function(key) {
            console.log(`"${key}" : ${this[key]}`);
        });
    }
};

function someString(){
    console.log("hello, world");
}

function logger(someString){
    console.log(someString, someInt);
}

const bound = logger.keys.bind(person); // биндит контекст логгера под peson и возвращает функцию
bound(); // вернет ключи person

logger.keys = 14;
logger.keys.call(person); // тоже самое но сразу
logger.grogger.print().setup.value().keys().keysAndValues.biba.call(person);
// logger.keysAndValues.call(person);